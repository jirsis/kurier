- name: install nodeJS
  import_tasks: nodejs.yml

- name: install magicMirror
  git:
    repo: 'https://github.com/MichMich/MagicMirror'
    dest: '{{ magicMirror_home }}'
    force: true

- name: check magicMirror dependencies exists
  find:
    paths: '{{ magicMirror_home }}/node_modules'
  register: magicMirror_dependencies
 
- name: download all MagicMirror dependencies
  npm: 
    path: '{{ magicMirror_home }}'
    state: present
  when: magicMirror_dependencies.examined  == 0

- name: copy initial MagicMirror config.js
  copy:
    src: magicmirror-config.js
    dest: '{{ magicMirror_home }}/config/config.js'
    force: true
    mode: 0644

- name: install and configurate MagicMirror modules
  import_tasks: magicMirror-modules.yml  

- name: check pm2 is installed
  shell: command -v pm2 >/dev/null 2>&1
  register: pm2_exist
  ignore_errors: yes

- name: install autostart MagicMirror manager
  npm: 
    name: pm2
    global: yes
    state: latest
  become: yes
  when: not pm2_exist.rc == 0

- name: deconfigure systemd MagicMirror manager
  command: env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 unstartup systemd -u pi --hp /home/pi
  become: yes
  when: not pm2_exist.rc == 0

# - name: stop MagicMirror
#   shell: pm2 stop magicMirror
#   args: 
#     chdir: '{{ magicMirror_home }}'

- name: run MagicMirror
  shell: pm2 start serveronly --name magicMirror
  args: 
    chdir: '{{ magicMirror_home }}'
  when: not pm2_exist.rc == 0

- name: configure systemd MagicMirror manager
  command: env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u pi --hp /home/pi
  become: yes
  when: not pm2_exist.rc == 0

- name: save systemd MagicMirror manager
  command: env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 save
  become: yes
  when: not pm2_exist.rc == 0

- name: check browser installed
  shell: command -v chromium-browser >/dev/null 2>&1
  register: browser_exist
  ignore_errors: yes

- name: install browser
  apt: 
    name: chromium-browser
    state: latest
  become: yes
  when: not browser_exist

- name: create directory to autostart browser script 
  file:
    path: /home/pi/.config/lxsession/LXDE-pi/
    state: directory

- name: configure kioskMode browser
  blockinfile:
    path: /home/pi/.config/lxsession/LXDE-pi/autostart
    create: yes
    block: |
      @xset s off
      @xset -dpms
      @xset s noblank
      @chromium-browser --app=http://localhost:3000 --start-fullscreen
    marker: "# {mark} kioskMode - ansible managed block"
  register: kiosk_mode_enabled

- name: configure crontab restart RPI at 01:42 am
  ansible.builtin.cron:
    name: "reboot RPI"
    minute: "42"
    hour: "1"
    job: "/usr/sbin/reboot"
  become: yes

- name: configure PIR sensor
  debug: 
    msg: 'configure PIR sensor TODO'

- name: configure switch off monitor
  debug: 
    msg: 'configure switch off monitor TODO'

